* The HTML loads two scripts:
	errorListener.js
	loader.js

* errorListener initializes a listener for the otherwise generic 'error' event, which will be thrown if a parsing error occurs. A parsing error is the only means of determining that the site visitor is not using a browser compatible with the JavaScript in use. If 'error' is thrown subsequently, the user will be redirected to the incompatible-browser page.

* The errorListener is removed within itself, i.e., if it is called, then it removes itself from the window. It also is removed in the dynamic import() callback in siteWideEditsRedux.js, for if no error is thrown at that point, then (1) the user is using a 2020 browser, and (2) we MUST eliminate the listener, or else ANY subsequent error will take the user to the incompatible-browser page, making debugging the site impossible.

* loader.js loads:

	noframework.waypoints.js
	passiveSupport.js
	appendToCSS.js
	siteWideEditsRedux.js

The first three are dependencies throughout the site.

siteWideEditsRedux.js dynamically imports the module:

	siteWideEditsClosure.mjs

...which returns an object with the method returnSiteWideEditsClosure(). Running that method does two things:

1) It collects the nonce from its location in the DOM (currently, in the web_author META element). That value is saved in the o.nonce value in the siteWideEditsClosure() method that is returned by returnSiteWideEditsClosure(). (The nonce is deleted from its initial home in the DOM after o.commonRoutines() is run.

2) It returns the siteWideEditsClosure() method, which encloses the nonce, commonRoutines(), and other needed routines.

siteWideEditsRedux() then runs the siteWideEditsClosure() that is returned by returnSiteWideEditsClosure().

It imports common.mjs using a pattern used subsequently for all dynamic imports of functions:

import('./common.mjs').then(function ({default: object}) {
	Object.keys(object).forEach(function (key) {
		if (typeof object[key] === 'function') {
			o[key] = object[key].bind(o);
		} else {
			o[key] = object[key];
		}
	});
	o.initializationRoutines();
});

Every property in the imported object is tested to see if it is a function. If it is, then the common object 'o' is bound to it, so that the 'this' keyword in that function will be the common object. An 'o' variable inside that function is assigned to 'this', so the inner 'o' will therefore equal the outer 'o', and all functions (imported or otherwise) will be methods of the common object 'o'.

assignToCommonObject() in common.mjs encapsulates this method and is called on each imported object.



